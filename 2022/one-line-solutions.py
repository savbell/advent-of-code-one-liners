# Day 01
print('Day 01 Part 1:', max([sum([int(x) for x in g]) for g in [group.split('\n') for group in open('inputs/day-01.txt').read().split('\n\n')]]))
print('Day 01 Part 2:', sum(sorted([sum([int(x) for x in g]) for g in [group.split('\n') for group in open('inputs/day-01.txt').read().split('\n\n')]], reverse=True)[0:3]))

# Day 02
print('Day 02 Part 1:', sum([{'A X':3+1,'A Y':6+2,'A Z':0+3,'B X':0+1,'B Y':3+2,'B Z':6+3,'C X':6+1,'C Y':0+2,'C Z':3+3}[x] for x in open('inputs/day-02.txt').read().split('\n')]))
print('Day 02 Part 2:', sum([{'A X':0+3,'A Y':3+1,'A Z':6+2,'B X':0+1,'B Y':3+2,'B Z':6+3,'C X':0+2,'C Y':3+3,'C Z':6+1}[x] for x in open('inputs/day-02.txt').read().split('\n')]))

# Day 03
print('Day 03 Part 1:', sum([ord(x)-96 if x.islower() else ord(x)-38 for x in [set(x).intersection(y).pop() for x, y in [[i[:len(i)//2], i[len(i)//2:]] for i in open('inputs/day-03.txt').read().split('\n')]]]))
print('Day 03 Part 2:', sum([ord(x)-96 if x.islower() else ord(x)-38 for x in [set(open('inputs/day-03.txt').read().split('\n')[i]).intersection(open('inputs/day-03.txt').read().split('\n')[i+1]).intersection(open('inputs/day-03.txt').read().split('\n')[i+2]).pop() for i in range(0,len(open('inputs/day-03.txt').read().split('\n')),3)]]))

# Day 04
print('Day 04 Part 1:', sum([(n[0][0] >= n[1][0] and n[0][1] <= n[1][1]) or (n[0][0] <= n[1][0] and n[0][1] >= n[1][1]) for n in [[[int(x) for x in a.split('-')], [int(y) for y in b.split('-')]] for a, b in [x.split(',') for x in open('inputs/day-04.txt').read().split('\n')]]]))
print('Day 04 Part 2:', sum([n[0][0] <= n[1][1] and n[0][1] >= n[1][0] for n in [[[int(x) for x in a.split('-')], [int(y) for y in b.split('-')]] for a, b in [x.split(',') for x in open('inputs/day-04.txt').read().split('\n')]]]))

# Day 05 - This one is a bit cheese but I'm doing my best. Requires Python 3.8 (https://peps.python.org/pep-0572/)
print('Day 05 Part 1:', ''.join([c[0] for c in crates] if not (input := open('inputs/day-05.txt').read().split('\n')) or not (moves := [[int(x[1]), int(x[3]), int(x[5])] for x in [y.split(' ') for y in input[10:]]]) or not (crates := [[] for i in range(9)]) or not [crates[j//4].append(line[j]) for line in input[:8] for j in range(1,len(line),4) if line[j].isalpha()] or [crates[move[2]-1].insert(0, crates[move[1]-1].pop(0)) for move in moves for n in range(move[0])] else ''))
print('Day 05 Part 2:', ''.join([c[0] for c in crates] if not (input := open('inputs/day-05.txt').read().split('\n')) or not (moves := [[int(x[1]), int(x[3]), int(x[5])] for x in [y.split(' ') for y in input[10:]]]) or not (crates := [[] for i in range(9)]) or not [crates[j//4].append(line[j]) for line in input[:8] for j in range(1,len(line),4) if line[j].isalpha()] or [crates[move[2]-1].insert(0, item) for move in moves for item in reversed([crates[move[1]-1].pop(0) for n in range(move[0])])] else ''))

# Day 06
print('Day 06 Part 1:', [i+1 for x in [open('inputs/day-06.txt').read()] for i in range(3,len(x)) if len(set(x[i-3:i+1])) == 4][0])
print('Day 06 Part 2:', [i+1 for x in [open('inputs/day-06.txt').read()] for i in range(13,len(x)) if len(set(x[i-13:i+1])) == 14][0])

# Day 07 - Even more cheese. But we got it!
print('Day 07 Part 1:', sum([x for x in dirs.values() if x <= 100000] if not (dirs := {}) and not (curDirs := []) and [((l[0] == '$' and l[1] == 'cd') and (((l[2] == '/') and (curDirs := ['//']) and not (dirs.update({'//':0}))) or (l[2] == '..' and curDirs.pop()) or ((curDir := '/'.join(curDirs) + '/' + l[2]) and not curDirs.append(curDir) and (not dirs.get(curDir) and not dirs.update({curDir:0}))))) or (l[0].isdigit() and [dirs.update({d: dirs[d] + int(l[0])}) for d in curDirs]) for l in [c.split(' ') for c in open('inputs/day-07.txt').read().split('\n')]] else ''))
print('Day 07 Part 2:', min([x for x in dirs.values() if x > dirs['//']-40000000]) if not (dirs := {}) and not (curDirs := []) and [((l[0] == '$' and l[1] == 'cd') and (((l[2] == '/') and (curDirs := ['//']) and not (dirs.update({'//':0}))) or (l[2] == '..' and curDirs.pop()) or ((curDir := '/'.join(curDirs) + '/' + l[2]) and not curDirs.append(curDir) and (not dirs.get(curDir) and not dirs.update({curDir:0}))))) or (l[0].isdigit() and [dirs.update({d: dirs[d] + int(l[0])}) for d in curDirs]) for l in [c.split(' ') for c in open('inputs/day-07.txt').read().split('\n')]] else '')

# Day 08 - Oh boy, I've started cheesing in my OG solutions now too.
print('Day 08 Part 1:', sum([not bool([x for x in t[r][:c] if x >= t[r][c]] and [x for x in t[r][c+1:] if x >= t[r][c]] and [x[c] for i, x in enumerate(t) if x[c] >= t[r][c] and i < r] and [x[c] for i, x in enumerate(t) if x[c] >= t[r][c] and i > r]) for t in [[[int(y) for y in x] for x in open('inputs/day-08.txt').read().split('\n')]] for r in range(len(t)) for c in range(len(t[r]))]))
print('Day 08 Part 2:', max([sum([(x < t[r][c]) or (found:=True) for x in t[r][:c][::-1] if not found] if not (found:=False) else '') * sum([(x < t[r][c]) or (found:=True) for x in t[r][c+1:] if not found] if not (found:=False) else '') * sum([(x[c] < t[r][c]) or (found:=True) for i, x in reversed(list(enumerate(t))) if not found and i < r] if not (found:=False) else '') * sum([(x[c] < t[r][c]) or (found:=True) for i, x in enumerate(t) if not found and i > r] if not (found:=False) else '') for t in [[[int(y) for y in x] for x in open('inputs/day-08.txt').read().split('\n')]] for r in range(len(t)) for c in range(len(t[r]))]))

# Day 09 - Today's solution is brought to you by x.insert(0, x.pop(0)+1)
print('Day 09 Part 1:', len(visited) if (visited := {(0,0)}) and (h := [0,0]) and (t := [0,0]) and [((d == 'R' and ((t[1] == h[1] and t[0] == h[0]-1 and (t.insert(0, t.pop(0)+1))) or (t[1] > h[1] and t[0] == h[0]-1 and not (t.insert(0, t.pop(0)+1) or t.insert(1, t.pop(1)-1))) or (t[1] < h[1] and t[0] == h[0]-1 and not (t.insert(0, t.pop(0)+1) or t.insert(1, t.pop(1)+1))) or 1) and not h.insert(0, h.pop(0)+1)) or (d == 'L' and ((t[1] == h[1] and t[0] == h[0]+1 and (t.insert(0, t.pop(0)-1))) or (t[1] > h[1] and t[0] == h[0]+1 and not (t.insert(0, t.pop(0)-1) or t.insert(1, t.pop(1)-1))) or (t[1] < h[1] and t[0] == h[0]+1 and not (t.insert(0, t.pop(0)-1) or t.insert(1, t.pop(1)+1))) or 1) and not h.insert(0, h.pop(0)-1)) or (d == 'U' and ((t[1] == h[1]-1 and t[0] == h[0] and (t.insert(1, t.pop(1)+1))) or (t[1] == h[1]-1 and t[0] < h[0] and not (t.insert(0, t.pop(0)+1) or t.insert(1, t.pop(1)+1))) or (t[1] == h[1]-1 and t[0] > h[0] and not (t.insert(0, t.pop(0)-1) or t.insert(1, t.pop(1)+1))) or 1) and h.insert(1, h.pop(1)+1)) or (d == 'D' and ((t[1] == h[1]+1 and t[0] == h[0] and (t.insert(1, t.pop(1)-1))) or (t[1] == h[1]+1 and t[0] < h[0] and not (t.insert(0, t.pop(0)+1) or t.insert(1, t.pop(1)-1))) or (t[1] == h[1]+1 and t[0] > h[0] and not (t.insert(0, t.pop(0)-1) or t.insert(1, t.pop(1)-1))) or 1) and not h.insert(1, h.pop(1)-1)) or 1) and (visited.add(tuple(t))) for d, n in (x.split(' ') for x in open('inputs/day-09.txt').read().split('\n')) for _ in range(int(n))] else '')
print('Day 09 Part 2:', len(visited) if (visited := {(0,0)}) and (s := [[0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0]]) and [not ((d == 'R' and s[0].insert(0, s[0].pop(0)+1)) or (d == 'L' and s[0].insert(0, s[0].pop(0)-1)) or (d == 'U' and s[0].insert(1, s[0].pop(1)+1)) or (d == 'D' and s[0].insert(1, s[0].pop(1)-1))) and [(s[i][0] < s[i-1][0]-1 and ((s[i][1] == s[i-1][1] and (s[i].insert(0, s[i].pop(0)+1))) or (s[i][1] > s[i-1][1] and not (s[i].insert(0, s[i].pop(0)+1) or s[i].insert(1, s[i].pop(1)-1))) or (s[i][1] < s[i-1][1] and not (s[i].insert(0, s[i].pop(0)+1) or s[i].insert(1, s[i].pop(1)+1))))) or (s[i][0] > s[i-1][0]+1 and ((s[i][1] == s[i-1][1] and (s[i].insert(0, s[i].pop(0)-1))) or (s[i][1] > s[i-1][1] and not (s[i].insert(0, s[i].pop(0)-1) or s[i].insert(1, s[i].pop(1)-1))) or (s[i][1] < s[i-1][1] and not (s[i].insert(0, s[i].pop(0)-1) or s[i].insert(1, s[i].pop(1)+1))))) or (s[i][1] < s[i-1][1]-1 and ((s[i][0] == s[i-1][0] and (s[i].insert(1, s[i].pop(1)+1))) or (s[i][0] < s[i-1][0] and not (s[i].insert(0, s[i].pop(0)+1) or s[i].insert(1, s[i].pop(1)+1))) or (s[i][0] > s[i-1][0] and not (s[i].insert(0, s[i].pop(0)-1) or s[i].insert(1, s[i].pop(1)+1))))) or (s[i][1] > s[i-1][1]+1 and ((s[i][0] == s[i-1][0] and (s[i].insert(1, s[i].pop(1)-1))) or (s[i][0] < s[i-1][0] and not (s[i].insert(0, s[i].pop(0)+1) or s[i].insert(1, s[i].pop(1)-1))) or (s[i][0] > s[i-1][0] and not (s[i].insert(0, s[i].pop(0)-1) or s[i].insert(1, s[i].pop(1)-1))))) for i in range(1,10)] and (visited.add(tuple(s[9]))) for d, n in (x.split(' ') for x in open('inputs/day-09.txt').read().split('\n')) for _ in range(int(n))] else '')

# Day 10
print('Day 10 Part 1:', sum(signalStrengths) if not (signalStrengths := []) and (x := 1) and not (cycle := 0) and [[(c[0] == 'addx') and [(cycle := cycle+1) and ((cycle+20) % 40 == 0 and signalStrengths.append(cycle*x)) for _ in range(2)] and (x := x+int(c[1]))] and [(c[0] == 'noop') and [(cycle := cycle+1) and ((cycle+20) % 40 == 0 and signalStrengths.append(cycle*x))]] for c in [y.split(' ') for y in open('inputs/day-10.txt').read().split('\n')]] else '')
print('Day 10 Part 2:\n',''.join(v[:-1]) if not (v := []) and (x := 1) and not (cycle := 0) and (sprite := ['#']*3 + ['.']*37) and not (crt := []) and [((c[0] == 'addx' and [(cycle := cycle+1) and ([crt.append('#' if sprite[cycle-((cycle//40)*40)-1] == '#' else '.')] or 1) for _ in range(2)] and ((x := x+int(c[1])) or 1) and (sprite := ['.']*40) and [sprite.pop(i) and sprite.insert(i, '#') for i in range(x-1,x+2) if i < 40 and i >= 0]) or (c[0] == 'noop' and [(cycle := cycle+1) and crt.append('#' if sprite[cycle-((cycle//40)*40)-1] == '#' else '.')])) for c in [y.split(' ') for y in open('inputs/day-10.txt').read().split('\n')]] and [not v.append(p) and ((i+1) % 40 == 0 and v.append('\n')) for i, p in enumerate(crt)] else '', sep='')

# Day 11
print('Day 11 Part 1:',inspectionCount[0] * inspectionCount[1] if (monkeys := [[list(map(int,[a.replace(',','') for a in mon[0][4:]])), (mon[1][6] == '*' and ((mon[1][7] == 'old' and (lambda a: a * a)) or (lambda a, n=int(mon[1][7]): a * n))) or ((mon[1][6] == '+' and ((mon[1][7] == 'old' and (lambda a: a + a)) or (lambda a, n=int(mon[1][7]): a + n)))), int(mon[2][5]), int(mon[3][9]), int(mon[4][9]), 0] for mon in [[z.split(' ') for z in y[1:]] for y in [x.split('\n') for x in open('inputs/day-11.txt').read().split('\n\n')]]]) and [[[not (m.insert(5, m.pop(5)+1)) and ((m[1](i) // 3 % m[2] == 0 and not monkeys[m[3]][0].append(m[1](i) // 3)) or not monkeys[m[4]][0].append(m[1](i) // 3)) for i in m[0]] and (not m.insert(1,[]) and m.pop(0)) for m in monkeys] for _ in range(20)] and (inspectionCount := sorted([k[5] for k in monkeys], reverse=True)) else '')
print('Day 11 Part 2:',inspectionCount[0] * inspectionCount[1] if (monkeys := [[list(map(int,[a.replace(',','') for a in mon[0][4:]])), (mon[1][6] == '*' and ((mon[1][7] == 'old' and (lambda a: a * a)) or (lambda a, n=int(mon[1][7]): a * n))) or ((mon[1][6] == '+' and ((mon[1][7] == 'old' and (lambda a: a + a)) or (lambda a, n=int(mon[1][7]): a + n)))), int(mon[2][5]), int(mon[3][9]), int(mon[4][9]), 0] for mon in [[z.split(' ') for z in y[1:]] for y in [x.split('\n') for x in open('inputs/day-11.txt').read().split('\n\n')]]]) and (lcm := 1) and ([lcm := lcm * k[2] for k in monkeys]) and [[[not (m.insert(5, m.pop(5)+1)) and (((m[1](i) % lcm) % m[2] == 0 and not monkeys[m[3]][0].append(m[1](i) % lcm)) or not monkeys[m[4]][0].append(m[1](i) % lcm)) for i in m[0]] and (not m.insert(1,[]) and m.pop(0)) for m in monkeys] for _ in range(10000)] and (inspectionCount := sorted([k[5] for k in monkeys], reverse=True)) else '')

# Day 12 - WIP

# Day 13 - WIP

# Day 14
print('Day 14 Part 1:', sandCount if [(not (cave := [])) and [(l != len(row)-1 and ((len(cave) == 0 and cave.extend(list(list()) for _ in range(max(line[0], row[l+1][0])+1)) or 1) and (0 < len(cave) <= max(line[0], row[l+1][0]) and cave.extend([['.' for _ in range(len(cave[0]))] for _ in range(max(line[0], row[l+1][0])-len(cave)+2)]) or 1) and (line[0] == row[l+1][0] and [(len(cave[0]) <= a and [c.extend(['.' for _ in range(a-len(c)+2)]) for c in cave] or 1) and (cave[line[0]].pop(a) and cave[line[0]].insert(a, '#')) for a in range(min(line[1], row[l+1][1]), max(line[1], row[l+1][1])+1)]) or [cave[b].pop(line[1]) and cave[b].insert(line[1], '#') for b in range(min(line[0], row[l+1][0]), max(line[0], row[l+1][0])+1)])) for row in [[list(map(int, z.split(','))) for z in y] for y in [x.split(' -> ') for x in open('inputs/day-14.txt').read().split('\n')]] for l, line in enumerate(row)] and [(not stopAll) and ((curX := 500) and not (curY := 0)) and [(curY+1 > len(cave[0])-1 and (stopAll := 1) and (sandCount := sandCount-1)) or (curY+1 > len(cave[0])-1) or (cave[curX][curY+1] == '.' and (curY := curY+1)) or (cave[curX-1][curY+1] == '.' and (curX := curX-1) and (curY := curY+1)) or (cave[curX+1][curY+1] == '.' and (curX := curX+1) and (curY := curY+1)) for _ in range(len(cave[0]))] and (cave[curX].pop(curY) and not cave[curX].insert(curY, 'o') and (sandCount := sandCount+1)) for _ in range(len(cave[0])*5)] if (not (stopAll := 0) and not (sandCount := 0)) else ''] else '')
print('Day 14 Part 2:', sandCount if [((not (cave := [])) and [(l != len(row)-1 and ((len(cave) == 0 and cave.extend(list(list()) for _ in range(max(line[0], row[l+1][0])+1)) or 1) and (0 < len(cave) <= max(line[0], row[l+1][0]) and cave.extend([['.' for _ in range(len(cave[0]))] for _ in range(max(line[0], row[l+1][0])-len(cave)+2)]) or 1) and (line[0] == row[l+1][0] and [(len(cave[0]) <= a and [c.extend(['.' for _ in range(a-len(c)+2)]) for c in cave] or 1) and (cave[line[0]].pop(a) and cave[line[0]].insert(a, '#')) for a in range(min(line[1], row[l+1][1]), max(line[1], row[l+1][1])+1)]) or [cave[b].pop(line[1]) and cave[b].insert(line[1], '#') for b in range(min(line[0], row[l+1][0]), max(line[0], row[l+1][0])+1)])) for row in [[list(map(int, z.split(','))) for z in y] for y in [x.split(' -> ') for x in open('inputs/day-14.txt').read().split('\n')]] for l, line in enumerate(row)]) and (cave := [['.' for _ in range(len(cave[0]))] for _ in range(len(cave[0])+1)] + cave + [['.' for _ in range(len(cave[0]))] for _ in range(len(cave[0])+1)]) and [c.extend(['.', '#']) for c in cave] and [(not stopAll) and ((curX := 500+len(cave[0])) and not (curY := 0)) and [(curY+1 >= len(cave[0])) or (cave[curX][curY+1] == '.' and (curY := curY+1)) or (cave[curX-1][curY+1] == '.' and ((curX := curX-1) or 1) and (curY := curY+1)) or (cave[curX+1][curY+1] == '.' and (curX := curX+1) and (curY := curY+1)) for _ in range(len(cave[0]))] and (cave[curX].pop(curY) and not cave[curX].insert(curY, 'o') and (sandCount := sandCount+1) and (cave[500+len(cave[0])][0] == 'o' and (stopAll := 1))) for _ in range(len(cave[0])*500)] if (not (stopAll := 0) and not (sandCount := 0)) else ''] else '')